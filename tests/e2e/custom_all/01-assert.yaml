apiVersion: v1
kind: ConfigMap
metadata:
  name: test-custom-agent
  labels:
    app.kubernetes.io/managed-by: splunk-otel-operator
data:
  collector.yaml: |2
    extensions:
      http_forwarder:
        ingress:
          endpoint: 0.0.0.0:6060
      health_check:
        endpoint: '0.0.0.0:13133'
      k8s_observer:
        auth_type: serviceAccount
        node: '${MY_NODE_NAME}'
      memory_ballast:
        size_mib: ${SPLUNK_BALLAST_SIZE_MIB}
      zpages:
        endpoint: '0.0.0.0:55679'
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: '0.0.0.0:14250'
          thrift_http:
            endpoint: '0.0.0.0:14268'
      otlp:
        protocols:
          grpc:
            endpoint: '0.0.0.0:4317'
          http:
            endpoint: '0.0.0.0:55681'
      zipkin:
        endpoint: '0.0.0.0:9411'
      smartagent/signalfx-forwarder:
        listenAddress: '0.0.0.0:9080'
        type: signalfx-forwarder
      signalfx:
        endpoint: '0.0.0.0:9943'
      hostmetrics:
        collection_interval: 10s
        scrapers:
          cpu: null
          disk: null
          filesystem: null
          load: null
          memory: null
          network: null
          paging: null
          processes: null
      kubeletstats:
        auth_type: serviceAccount
        collection_interval: 10s
        endpoint: '${MY_NODE_IP}:10250'
        extra_metadata_labels:
          - container.id
        metric_groups:
          - container
          - pod
          - node
      receiver_creator:
        receivers: null
        watch_observers:
          - k8s_observer
      prometheus/self:
        config:
          scrape_configs:
            - job_name: otel-agent
              scrape_interval: 10s
              static_configs:
                - targets:
                    - '${MY_POD_IP}:8888'
    exporters:
      sapm:
        access_token: '${SPLUNK_ACCESS_TOKEN}'
        endpoint: 'https://ingest.${SPLUNK_REALM}.signalfx.com/v2/trace'
      signalfx:
        access_token: '${SPLUNK_ACCESS_TOKEN}'
        api_url: 'https://api.${SPLUNK_REALM}.signalfx.com'
        ingest_url: 'https://ingest.${SPLUNK_REALM}.signalfx.com'
        sync_host_metadata: true
      splunk_hec:
        token: '${SPLUNK_ACCESS_TOKEN}'
        endpoint: 'https://ingest.${SPLUNK_REALM}.signalfx.com/v1/log'
      logging: null
      logging/debug:
        loglevel: debug
    processors:
      k8s_tagger:
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.name
            - k8s.pod.uid
        filter:
          node: '${MY_NODE_NAME}'
      batch: null
      memory_limiter:
        check_interval: 2s
        limit_mib: '${SPLUNK_MEMORY_LIMIT_MIB}'
      resource:
        attributes:
          - action: insert
            key: k8s.node.name
            value: '${MY_NODE_NAME}'
          - action: insert
            key: k8s.cluster.name
            value: '${MY_CLUSTER_NAME}'
          - action: insert
            key: deployment.environment
            value: '${MY_CLUSTER_NAME}'
      resource/self:
        attributes:
          - action: insert
            key: k8s.pod.name
            value: '${MY_POD_NAME}'
          - action: insert
            key: k8s.pod.uid
            value: '${MY_POD_UID}'
          - action: insert
            key: k8s.namespace.name
            value: '${MY_NAMESPACE}'
      resourcedetection:
        override: false
        timeout: 10s
        detectors:
          - system
          - env
    service:
      extensions:
        - health_check
        - k8s_observer
        - memory_ballast
        - zpages
      pipelines:
        traces:
          receivers:
            - smartagent/signalfx-forwarder
            - otlp
            - jaeger
            - zipkin
          processors:
            - k8s_tagger
            - batch
            - resource
            - resourcedetection
          exporters:
            - sapm
            - signalfx
        metrics:
          receivers:
            - hostmetrics
            - kubeletstats
            - receiver_creator
            - signalfx
          processors:
            - batch
            - resource
            - resourcedetection
          exporters:
            - signalfx
        metrics/self:
          receivers:
            - prometheus/self
          processors:
            - batch
            - resource
            - resource/self
            - resourcedetection
          exporters:
            - signalfx
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-custom-cluster-receiver
  labels:
    app.kubernetes.io/managed-by: splunk-otel-operator
data:
  collector.yaml: |2+
    extensions:
      http_forwarder:
        ingress:
          endpoint: 0.0.0.0:6061
      health_check:
        endpoint: '0.0.0.0:13133'
      memory_ballast:
        size_mib: ${SPLUNK_BALLAST_SIZE_MIB}
    receivers:
      k8s_cluster:
        auth_type: serviceAccount
        metadata_exporters:
          - signalfx
      prometheus/self:
        config:
          scrape_configs:
            - job_name: otel-k8s-cluster-receiver
              scrape_interval: 10s
              static_configs:
                - targets:
                    - '${MY_POD_IP}:8888'
    exporters:
      signalfx:
        access_token: '${SPLUNK_ACCESS_TOKEN}'
        api_url: 'https://api.${SPLUNK_REALM}.signalfx.com'
        ingest_url: 'https://ingest.${SPLUNK_REALM}.signalfx.com'
        timeout: 10s
      logging: null
      logging/debug:
        loglevel: debug
    processors:
      batch: null
      memory_limiter:
        check_interval: 2s
        limit_mib: '${SPLUNK_MEMORY_LIMIT_MIB}'
      resource:
        attributes:
          - action: insert
            key: metric_source
            value: kubernetes
          - action: insert
            key: receiver
            value: k8scluster
          - action: upsert
            key: k8s.cluster.name
            value: '${MY_CLUSTER_NAME}'
          - action: upsert
            key: deployment.environment
            value: '${MY_CLUSTER_NAME}'
      resource/self:
        attributes:
          - action: insert
            key: k8s.node.name
            value: '${MY_NODE_NAME}'
          - action: insert
            key: k8s.pod.name
            value: '${MY_POD_NAME}'
          - action: insert
            key: k8s.pod.uid
            value: '${MY_POD_UID}'
          - action: insert
            key: k8s.namespace.name
            value: '${MY_NAMESPACE}'
      resourcedetection:
        override: false
        timeout: 10s
        detectors:
          - system
          - env
    service:
      extensions:
        - health_check
        - memory_ballast
      pipelines:
        metrics:
          receivers:
            - k8s_cluster
          processors:
            - batch
            - resource
            - resourcedetection
          exporters:
            - signalfx
        metrics/self:
          receivers:
            - prometheus/self
          processors:
            - batch
            - resource
            - resource/self
            - resourcedetection
          exporters:
            - signalfx
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: test-custom-agent
  annotations:
    deprecated.daemonset.template.generation: "1"
    prometheus.io/path: /metrics
    prometheus.io/port: "8888"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/component: splunk-otel-collector
    app.kubernetes.io/managed-by: splunk-otel-operator
    app.kubernetes.io/name: test-custom-agent
    app.kubernetes.io/part-of: opentelemetry
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: splunk-otel-collector
        app.kubernetes.io/managed-by: splunk-otel-operator
        app.kubernetes.io/name: test-custom-agent
        app.kubernetes.io/part-of: opentelemetry
    spec:
      containers:
      - args:
        - --config=/conf/collector.yaml
        env:
        - name: SPLUNK_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              key: access-token
              name: splunk-access-token
        - name: SPLUNK_REALM
          value: my-splunk-realm-custom
        - name: MY_CLUSTER_NAME
          value: test-cluster-custom
        imagePullPolicy: IfNotPresent
        name: otc-container
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            memory: 100Mi
            cpu: 100m
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /conf
          name: otc-internal
        - mountPath: /hostfs
          mountPropagation: HostToContainer
          name: hostfs
          readOnly: true
        - mountPath: /etc/passwd
          name: etc-passwd
          readOnly: true
      dnsPolicy: ClusterFirst
      hostNetwork: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: splunk-otel-operator-acccount
      serviceAccountName: splunk-otel-operator-acccount
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: node.alpha.kubernetes.io/role
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: collector.yaml
            path: collector.yaml
          name: test-custom-agent
        name: otc-internal
      - hostPath:
          path: /
          type: ""
        name: hostfs
      - hostPath:
          path: /etc/passwd
          type: ""
        name: etc-passwd
