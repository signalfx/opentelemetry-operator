apiVersion: otel.splunk.com/v1alpha1
kind: Agent
metadata:
  name: test-custom
spec:
  clusterName: test-cluster-custom
  realm: my-splunk-realm-custom
  agent:
    config: |2
      extensions:
        http_forwarder:
          ingress:
            endpoint: 0.0.0.0:6060
        health_check:
          endpoint: '0.0.0.0:13133'
        zpages:
          endpoint: '0.0.0.0:55679'
        k8s_observer:
          auth_type: serviceAccount
          node: '${MY_NODE_NAME}'
      receivers:
        jaeger:
          protocols:
            grpc:
              endpoint: '0.0.0.0:14250'
            thrift_http:
              endpoint: '0.0.0.0:14268'
        otlp:
          protocols:
            grpc:
              endpoint: '0.0.0.0:4317'
            http:
              endpoint: '0.0.0.0:55681'
        zipkin:
          endpoint: '0.0.0.0:9411'
        smartagent/signalfx-forwarder:
          listenAddress: '0.0.0.0:9080'
          type: signalfx-forwarder
        signalfx:
          endpoint: '0.0.0.0:9943'
        hostmetrics:
          collection_interval: 10s
          scrapers:
            cpu: null
            disk: null
            filesystem: null
            load: null
            memory: null
            network: null
            paging: null
            processes: null
        kubeletstats:
          auth_type: serviceAccount
          collection_interval: 10s
          endpoint: '${MY_NODE_IP}:10250'
          extra_metadata_labels:
            - container.id
          metric_groups:
            - container
            - pod
            - node
        receiver_creator:
          receivers: null
          watch_observers:
            - k8s_observer
        prometheus/self:
          config:
            scrape_configs:
              - job_name: otel-agent
                scrape_interval: 10s
                static_configs:
                  - targets:
                      - '${MY_POD_IP}:8888'
      exporters:
        sapm:
          access_token: '${SPLUNK_ACCESS_TOKEN}'
          endpoint: 'https://ingest.${SPLUNK_REALM}.signalfx.com/v2/trace'
        signalfx:
          access_token: '${SPLUNK_ACCESS_TOKEN}'
          api_url: 'https://api.${SPLUNK_REALM}.signalfx.com'
          ingest_url: 'https://ingest.${SPLUNK_REALM}.signalfx.com'
          sync_host_metadata: true
        splunk_hec:
          token: '${SPLUNK_ACCESS_TOKEN}'
          endpoint: 'https://ingest.${SPLUNK_REALM}.signalfx.com/v1/log'
        logging: null
        logging/debug:
          loglevel: debug
      processors:
        k8s_tagger:
          extract:
            metadata:
              - k8s.namespace.name
              - k8s.node.name
              - k8s.pod.name
              - k8s.pod.uid
          filter:
            node: '${MY_NODE_NAME}'
        batch: null
        memory_limiter:
          ballast_size_mib: '${SPLUNK_BALLAST_SIZE_MIB}'
          check_interval: 2s
          limit_mib: '${SPLUNK_MEMORY_LIMIT_MIB}'
        resource:
          attributes:
            - action: insert
              key: k8s.node.name
              value: '${MY_NODE_NAME}'
            - action: insert
              key: k8s.cluster.name
              value: '${MY_CLUSTER_NAME}'
            - action: insert
              key: deployment.environment
              value: '${MY_CLUSTER_NAME}'
        resource/self:
          attributes:
            - action: insert
              key: k8s.pod.name
              value: '${MY_POD_NAME}'
            - action: insert
              key: k8s.pod.uid
              value: '${MY_POD_UID}'
            - action: insert
              key: k8s.namespace.name
              value: '${MY_NAMESPACE}'
        resourcedetection:
          override: false
          timeout: 10s
          detectors:
            - system
            - env
      service:
        extensions:
          - health_check
          - k8s_observer
          - zpages
        pipelines:
          traces:
            receivers:
              - smartagent/signalfx-forwarder
              - otlp
              - jaeger
              - zipkin
            processors:
              - k8s_tagger
              - batch
              - resource
              - resourcedetection
            exporters:
              - sapm
              - signalfx
          metrics:
            receivers:
              - hostmetrics
              - kubeletstats
              - receiver_creator
              - signalfx
            processors:
              - batch
              - resource
              - resourcedetection
            exporters:
              - signalfx
          metrics/self:
            receivers:
              - prometheus/self
            processors:
              - batch
              - resource
              - resource/self
              - resourcedetection
            exporters:
              - signalfx
    env:
      - name: SPLUNK_ACCESS_TOKEN
        valueFrom:
          secretKeyRef:
            key: access-token
            name: splunk-access-token
      - name: SPLUNK_REALM
        value: my-splunk-realm-custom
      - name: MY_CLUSTER_NAME
        value: test-cluster-custom
  clusterReceiver:
    config: |2
      extensions:
        http_forwarder:
          ingress:
            endpoint: 0.0.0.0:6061
        health_check:
          endpoint: '0.0.0.0:13133'
      receivers:
        k8s_cluster:
          auth_type: serviceAccount
          metadata_exporters:
            - signalfx
        prometheus/self:
          config:
            scrape_configs:
              - job_name: otel-k8s-cluster-receiver
                scrape_interval: 10s
                static_configs:
                  - targets:
                      - '${MY_POD_IP}:8888'
      exporters:
        signalfx:
          access_token: '${SPLUNK_ACCESS_TOKEN}'
          api_url: 'https://api.${SPLUNK_REALM}.signalfx.com'
          ingest_url: 'https://ingest.${SPLUNK_REALM}.signalfx.com'
          timeout: 10s
        logging: null
        logging/debug:
          loglevel: debug
      processors:
        batch: null
        memory_limiter:
          ballast_size_mib: '${SPLUNK_BALLAST_SIZE_MIB}'
          check_interval: 2s
          limit_mib: '${SPLUNK_MEMORY_LIMIT_MIB}'
        resource:
          attributes:
            - action: insert
              key: metric_source
              value: kubernetes
            - action: insert
              key: receiver
              value: k8scluster
            - action: upsert
              key: k8s.cluster.name
              value: '${MY_CLUSTER_NAME}'
            - action: upsert
              key: deployment.environment
              value: '${MY_CLUSTER_NAME}'
        resource/self:
          attributes:
            - action: insert
              key: k8s.node.name
              value: '${MY_NODE_NAME}'
            - action: insert
              key: k8s.pod.name
              value: '${MY_POD_NAME}'
            - action: insert
              key: k8s.pod.uid
              value: '${MY_POD_UID}'
            - action: insert
              key: k8s.namespace.name
              value: '${MY_NAMESPACE}'
        resourcedetection:
          override: false
          timeout: 10s
          detectors:
            - system
            - env
      service:
        extensions:
          - health_check
        pipelines:
          metrics:
            receivers:
              - k8s_cluster
            processors:
              - batch
              - resource
              - resourcedetection
            exporters:
              - signalfx
          metrics/self:
            receivers:
              - prometheus/self
            processors:
              - batch
              - resource
              - resource/self
              - resourcedetection
            exporters:
              - signalfx
    resources:
      requests:
        memory: "100Mi"
        cpu: "300m"
      limits:
        memory: "200Mi"
        cpu: "400m"
  gateway:
    disabled: true
